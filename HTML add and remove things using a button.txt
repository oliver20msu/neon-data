//HTML add and remove things using a button
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        /* Styles the main container of the to-do list */
        .todo-container {
            width: 300px;
            margin: 50px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        /* Removes default list styling for the to-do list */
        .todo-list {
            list-style-type: none;
            padding: 0;
        }
        /* Styles each list item in the to-do list */
        li {
            margin: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        /* Adds spacing for buttons in list items */
        button {
            margin-left: 10px;
        }
    </style>
</head>
<body>
<div class="todo-container">
    <h1>To-Do List</h1>
    <input type="text" id="taskInput" placeholder="Add a new task">

    <button class="add-btn" onclick="addTask()">Add Task</button>

    <ul class="todo-list" id="todoList"></ul>
</div>
<script>
    // Function to add task
    function addTask() {
        const input = document.getElementById("taskInput");
        const taskText = input.value.trim();
        if (taskText !== "") {
            const ul = document.getElementById("todoList");
            // Create new list item
            const li = document.createElement("li");
            // Create task text element
            const span = document.createElement("span");
            span.textContent = taskText;
            // Create edit button (placeholder for future functionality)
            const editButton = document.createElement("button");
            editButton.textContent = "Edit";
            // For now, editButton does nothing or you can add a simple alert
            editButton.onclick = () => alert("Edit functionality coming soon!"); // You had editTask(span) which is fine if you're building that out.
                                                                                // For this example, I'm simplifying if editTask isn't defined yet.
                                                                                // If you do have editTask, keep your original line.
            // Create remove button
            const removeButton = document.createElement("button");
            removeButton.textContent = "Delete";
            // Crucially, pass the 'li' element to the removeTask function
            removeButton.onclick = () => removeTask(li);
            // Append buttons and text to the list item
            li.appendChild(span);
            li.appendChild(editButton);
            li.appendChild(removeButton);
            // Append list item to the list
            ul.appendChild(li);
            // Clear the input field
            input.value = "";
        }
        else {
            alert("Please enter a valid task.");
        }
    }

    // Function to delete a task
    function removeTask(taskItem) { // Accept the taskItem (the <li>) as an argument
        // Get the parent element of the task item (which is the <ul>)
        const ul = document.getElementById("todoList");

        // Remove the task item (<li>) from its parent (the <ul>)
        ul.removeChild(taskItem);
        // Alternatively, you can use: taskItem.remove(); which is a more modern approach
    }

    // You can add an empty editTask function for now if you want to keep the edit button
    function editTask(spanElement) {
        // This function would contain logic to make the span editable
        // For example, replace span with an input field, let user edit, then save.
        alert("Edit functionality not yet implemented!");
    }
</script>
</body>
</html>